
Testing Writeup:

M2:
Pranav:
Tested Welcome Screen button to make sure it took the user to the Initial Configuration Screen. The test clicks on the "Click to Start" button and verifies the next page is the Configuration Screen page.

Eric:
Tested the Player constructor with two arguments, Name and Level. The test ensures that the Player is not equal to null and then goes attribute by attribute to ensure that the Player's attributes are what is expected (name, level, money, and monument health).

Spancer:
Tested Player one-argument constructor (just Name). This test ensures that the one-arg constructor for Player works like expected and has all the expected attributes, such as name, level, money, and monument health. Since the one-arg constructor does not have an option to set the Level, it is automatically set to Easy, so the test checks that the parameters are set accocrdingly.

Laolu:
Tested Player constructor and controller to make sure they work together as expected. First created a Player using the two-argument constructor and made sure all the attributes were set accordingly. Then created a Controller object and called its createPlayer method to create a Player that way. Went through the same process of checking the Player's attributes but did so through the Controller object and its getPlayer() method.



M4:
Pranav:
-Tested "Start New Game" button to make sure it takes user back to Welcome Screen. The test manually ends the game and selects "Start New Game" and verifies the next page is the Welcome Screen.

-Tested to make sure Game Over Screen has both a "Start New Game" button and a "End Game" button. The test manually end the game and verifies "Start New Game" and "End Game" exist


Eric:
-Tests the application to see if the monument gets sufficiently damaged on Easy mode and updates monument health correctly. The test lets one round of the game play and checks the monument health upon completion.

-Tests the Close Game button to ensure that the game exits properly. The test checks to see if controller and player are equal to null.


Laolu:
-Tests the Start Combat button. The test starts a mock game and ensures that the Start Combat button appears correctly when the Game Screen comes up.

-Tests the application to ensure that, upon restarting the game, the resulting game is correct. The test goes through the process of creating a game, ends it, then clicks the Start New Game button. Once the new game is started, the test goes through the same process again and makes sure that the resulting Game Screen comes up properly.


Spencer:
-Tests the end game logic. Runs a sample game and waits until the game is completed (by allowing monument to die) then makes sure that the End Game screen is pulled up correctly.

-Tests purchasing a tower while a game is active. The test runs a sample game, buys a heavy tower while the game is running, and ensures that the tower has been bought by checking the resulting money that Player has.


M5:

Pranav:
-Tested money gain implementation. The test starts a game and buys a heavy tower that kills the light enemies and makes sure money is gained.

-Tested tower attacking enemies. The test starts a game and buys a heavy tower and makes sure the enemies are killed.

*REMAINING TESTS*
-test that you can buy tower during combat (literally copy and paste test from last milestone)
-test that monument takes different damage from enemies (3 tests: easy, intermediate, and hard)
-test that enemies can take damage without being killed
-test that you can buy more towers after a round is over
